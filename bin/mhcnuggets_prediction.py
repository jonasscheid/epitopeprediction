#!/usr/bin/env python

import argparse
import pandas as pd
import numpy as np
import typing
import sys
import re
import os
import tempfile
import logging
from mhcnuggets.src.predict import predict


# Create a logger
logging.basicConfig(filename='mhcnuggets_prediction.log', filemode='w',level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')

def parse_args(argv=None) -> typing.List[str]:
    """
    Parse command line arguments
    :param argv: list of arguments
    :return: parsed arguments
    """
    required = True if '--version' not in sys.argv else False
    parser = argparse.ArgumentParser(description='Predicting epitopes using Mhcflurry')
    parser.add_argument('--input', required=required, help='Input file containing the protein sequences')
    parser.add_argument('--alleles', required=required, help='Input string containing the alleles')
    parser.add_argument('--output', required=required, help='Output file containing the predicted epitopes')
    parser.add_argument('--mhcclass', required=required, help='Get MHC Class of sample')
    parser.add_argument('--threshold', type=float, default=50, help='Threshold for the prediction')
    parser.add_argument('--version', action='store_true', help='Tool version')

    return parser.parse_args(argv)


def main():
    args = parse_args()
    #collect all alleles and peptide for the sample
    alleles = args.alleles.split(';')
    peptides = pd.read_csv(args.input, sep='\t')['sequence']

    #convert id and peptide tsv into one peptide per line without header
    with open('mhcnuggets_peptides.tsv', 'w+') as input:
        peptides.to_csv(input, sep='\t', index=False, header=False)

    #create empty dataframe for mhcnuggets outputs
    df = pd.DataFrame({'allele':[],'peptide':[],'ic50':[],'human_proteome_rank':[]}).reset_index(drop=True)

    for a in alleles:
        input_a = a.replace("*", "")
        #2 files will be generated by mhcnuggets per allele
        file_name = "temp_"+args.output[:-4]+"_"+input_a+"_ranks.tsv"
        file_name2 = "temp_"+args.output[:-4]+"_"+input_a+".tsv"
        #catch stdout from mhcnuggets care for allele not found
        sys.stdout = open('temp_prediction.log', 'w')
        #mhcnuggets prediction
        predict(class_=args.mhcclass, peptides_path = 'mhcnuggets_peptides.tsv', output=file_name2, mhc=input_a, rank_output=True)
        sys.stdout = sys.__stdout__
        #handle allele not found
        output_a = input_a
        with open('temp_prediction.log', 'r') as f:
            for line in f:
                if re.search('Closest allele found', line):
                    output_a = line.split(" ")[-1][:-1]
        os.remove('temp_prediction.log')
        if input_a != output_a:
            logging.warning("Allele "+input_a+" not found. Closest allele found: "+output_a)

        #write mhcflurry allele ouput to df
        new_df = pd.read_csv(file_name)
        os.remove(file_name)
        os.remove(file_name2)
        #insert predicted allele into dataframe at column position 1
        allele_list = [input_a for _ in range(new_df.shape[0])]
        new_df.insert(1, 'allele', allele_list)
        df = pd.concat([df, new_df],ignore_index=True, axis=0)

    os.remove('mhcnuggets_peptides.tsv')
    #join the information on one peptide into one row
    df = df.pivot(index='peptide', columns=['allele'], values=['ic50', 'human_proteome_rank'])
    #join the multiple columns
    df.columns = df.columns.map('_'.join).str.strip('_')
    #generate peptide column
    df = df.rename_axis('peptide').reset_index()
    #write joined df to output file
    df.to_csv(args.output, sep='\t', index=False)


if __name__ == '__main__':
    main()
