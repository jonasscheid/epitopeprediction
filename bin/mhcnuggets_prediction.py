#!/usr/bin/env python

import argparse
import pandas as pd
import numpy as np
import typing
import sys
import re
import os
import logging
from mhcnuggets.src.predict import predict

# instantiate global logger object
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

def parse_args(argv=None) -> typing.List[str]:
    """
    Parse command line arguments
    :param argv: list of arguments
    :return: parsed arguments
    """
    required = True if '--version' not in sys.argv else False
    parser = argparse.ArgumentParser(description='Predicting epitopes using Mhcflurry')
    parser.add_argument('--input', required=required, help='Input file containing the protein sequences')
    parser.add_argument('--alleles', required=required, help='Input string containing the alleles')
    parser.add_argument('--output', required=required, help='Output file containing the predicted epitopes')
    parser.add_argument('--min_peptide_length', type=int, default=8, help='Minimum length of the peptides')
    parser.add_argument('--max_peptide_length', type=int, default=12, help='Maximum length of the peptides')
    parser.add_argument('--mhcclass', required=required, help='Get MHC Class of sample')
    parser.add_argument('--threshold', type=float, default=50, help='Threshold for the prediction')
    parser.add_argument('--version', action='store_true', help='Tool version')

    return parser.parse_args(argv)


def main():
    args = parse_args()
    min_length_given_by_mhcnuggets = 1
    max_length_given_by_mhcnuggets = 15
    if args.mhcclass == "II":
        max_length_given_by_mhcnuggets = 30

    alleles = [allele.replace("*", "") for allele in args.alleles.split(';')]
    peptides = pd.read_csv(args.input, sep='\t')['sequence']

    # remove peptides that are too short or too long
    for peptide in peptides:
        if len(peptide) not in set(range(args.min_peptide_length, args.max_peptide_length+1))&set(range(min_length_given_by_mhcnuggets, max_length_given_by_mhcnuggets+1)):
            logger.warning(f'Peptide {peptide} does not have the right length. Skipping this peptide {peptide}.')
            peptides = peptides[peptides != peptide].reset_index(drop=True)

    # Convert id and peptide tsv into one peptide per line without header
    with open('mhcnuggets_peptides.tsv', 'w+') as input:
        peptides.to_csv(input, sep='\t', index=False, header=False)

    #df = pd.DataFrame({'allele':[],'peptide':[],'ic50':[],'human_proteome_rank':[]}).reset_index(drop=True)
    tmp_dfs = []
    for allele in alleles:
        # Two files will be generated by mhcnuggets per allele
        # The tool will kick out any "." in the file name so replacing it in advance will prevent errors afterwards
        tmp_file_name = f'tmp_{args.output[:-4].replace(".","_")}_{allele}.tsv'
        tmp_file_name_ranks = f'tmp_{args.output[:-4].replace(".","_")}_{allele}_ranks.tsv'
        # Log mhcnuggets prediction
        sys.stdout = open('tmp_prediction.log', 'w')
        predict(class_=args.mhcclass, peptides_path = 'mhcnuggets_peptides.tsv', output=tmp_file_name, mhc=allele, rank_output=True)
        sys.stdout = sys.__stdout__
        # Log allele not found
        allele_from_log = allele
        with open('tmp_prediction.log', 'r') as f:
            for line in f:
                if re.search('Closest allele found', line):
                    allele_from_log = line.split(" ")[-1][:-1]
        os.remove('tmp_prediction.log')
        if allele != allele_from_log:
            logger.warning(f'Allele {allele} not found. Closest allele found: {allele_from_log}')

        # Read mhcnuggets output
        tmp_df = pd.read_csv(tmp_file_name_ranks)
        tmp_df['allele'] =  allele
        tmp_dfs.append(tmp_df)

        # Remove tmp files
        os.remove(tmp_file_name)
        os.remove(tmp_file_name_ranks)

    df = pd.concat(tmp_dfs,ignore_index=True, axis=0)
    df = df.drop_duplicates(subset=['peptide', 'allele'])
    # long format -> wide format
    df = df.pivot(index='peptide', columns='allele', values=['ic50', 'human_proteome_rank'])
    #join the multiple columns
    df.columns = df.columns.map('_'.join).str.strip('_')
    #generate peptide column
    df = df.rename_axis('peptide').reset_index()
    #write joined df to output file
    df.to_csv(args.output, sep='\t', index=False)

    # Clean up
    os.remove('mhcnuggets_peptides.tsv')

if __name__ == '__main__':
    main()
